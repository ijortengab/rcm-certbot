#!/bin/bash

# Common Functions.
red() { echo -ne "\e[91m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
green() { echo -ne "\e[92m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
yellow() { echo -ne "\e[93m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
blue() { echo -ne "\e[94m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
magenta() { echo -ne "\e[95m" >&2; echo -n "$@" >&2; echo -ne "\e[39m" >&2; }
error() { echo -n "$INDENT" >&2; red '#' "$@" >&2; echo >&2; }
success() { echo -n "$INDENT" >&2; green '#' "$@" >&2; echo >&2; }
chapter() { echo -n "$INDENT" >&2; yellow '#' "$@" >&2; echo >&2; }
title() { echo -n "$INDENT" >&2; blue '#' "$@" >&2; echo >&2; }
code() { echo -n "$INDENT" >&2; magenta "$@" >&2; echo >&2; }
x() { echo >&2; exit 1; }
e() { echo -n "$INDENT" >&2; echo -n "$@" >&2; }
_() { echo -n "$INDENT" >&2; echo -n "#"' ' >&2; [ -n "$1" ] && echo -n "$@" >&2; }
_,() { echo -n "$@" >&2; }
_.() { echo >&2; }
__() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2; }
___() { echo -n "$INDENT" >&2; echo -n "# ${RCM_INDENT}${RCM_INDENT}" >&2; [ -n "$1" ] && echo "$@" >&2 || echo -n  >&2; }
____() { echo >&2; [ -n "$RCM_DELAY" ] && sleep "$RCM_DELAY"; }
----() { echo -n "$RCM_INDENT"; }

# Parse arguments. Generated by parse-options.sh
_new_arguments=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --help) help=1; shift ;;
        --version) version=1; shift ;;
        --certificate-name=*) certificate_name="${1#*=}"; shift ;;
        --certificate-name) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then certificate_name="$2"; shift; fi; shift ;;
        --dns-plugin=*) dns_plugin="${1#*=}"; shift ;;
        --dns-plugin) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then dns_plugin="$2"; shift; fi; shift ;;
        --domain=*) domain+=("${1#*=}"); shift ;;
        --domain) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then domain+=("$2"); shift; fi; shift ;;
        --email=*) email="${1#*=}"; shift ;;
        --email) if [[ ! $2 == "" && ! $2 =~ (^--$|^-[^-]|^--[^-]) ]]; then email="$2"; shift; fi; shift ;;
        --fast) fast=1; shift ;;
        --[^-]*) shift ;;
        *) _new_arguments+=("$1"); shift ;;
    esac
done
set -- "${_new_arguments[@]}"
unset _new_arguments

# Define variables and constants.
[ -z "$fast" ] && fast="$RCM_FAST"; [ "$fast" == 0 ] && fast=
RCM_DELAY=${RCM_DELAY:=.5}; [ -n "$fast" ] && unset RCM_DELAY
RCM_INDENT='    '; [ "$(tput cols)" -le 80 ] && RCM_INDENT='  '

# Functions.
printVersion() {
    echo '0.1.2'
}
printHelp() {
    title Cerbot Obtain
    _ 'Mode '; yellow default; _, .; _.
    _ 'Version '; yellow `printVersion`; _.
    _.
    cat << EOF
Usage: rcm-certbot-obtain [options]

Global Options.
   --fast
        No delay every subtask.
   --version
        Print version of this script.
   --help
        Show this help.

Options:
   --domain *
        Set the domain. Multivalue.
   --certificate-name
        Use the existing certificate name that issued by Let's encrypt or set a
        new name of certificate that to be obtained.
        Prepopulate value from variable CERTIFICATE_NAME.
        Left blank will use auto set by certbot, usually the FQDN (with an integer suffix in case of conflict).
   --dns-plugin
        Select how to authenticate domain.
        Values available from command: rcm-plugin(list --interface=certbot_dns).
   --email
        Email contact of certbot account.

RCM Config:
   --no-timer
   --no-confirmation
EOF
}

# Help and Version.
[ -n "$help" ] && { printHelp; exit 1; }
[ -n "$version" ] && { printVersion; exit 1; }

# Title.
title rcm-certbot-obtain
____

[ "$EUID" -ne 0 ] && { error This script needs to be run with superuser privileges.; x; }

# Dependency.
while IFS= read -r line; do
    [[ -z "$line" ]] || command -v `cut -d: -f1 <<< "${line}"` >/dev/null || { error Unable to proceed, command not found: '`'`cut -d: -f1 <<< "${line}"`'`'.; x; }
done <<< `printHelp 2>/dev/null | sed -n '/^Dependency:/,$p' | sed -n '2,/^\s*$/p' | sed 's/^ *//g'`

# Require, validate, and populate value.
chapter Dump variable.
[ -n "$fast" ] && isfast=' --fast' || isfast=''
if [[ "${#domain[@]}" -eq 0 ]];then
    error Argument --domain is required.; x
fi
is_domain_array=()
e; magenta 'domain=('
first=1
for each in "${domain[@]}";do
    if [ -n "$first" ];then
        magenta "'""$each""'"; first=
    else
        magenta " '""$each""'";
    fi
    is_domain_array+=("--domain=${each}")
done
magenta ')'; _.
code 'certificate_name="'$certificate_name'"'
[ -n "$certificate_name" ] && is_certificate_name=" --cert-name=${certificate_name}" || is_certificate_name=
[ -n "$email" ] && is_email=" --email=${email}" || is_email=
code 'email="'$email'"'
code 'dns_plugin="'$dns_plugin'"'
tempfile=
____

append_arguments=()
if [ -n "$dns_plugin" ];then
    [ -z "$tempfile" ] && tempfile=$(mktemp -p /dev/shm -t rcm-certbot-obtain.XXXXXX)
    INDENT+='    ' \
    rcm-plugin $isfast execute --interface=certbot_dns --name="$dns_plugin" \
        --method='append-arguments' \
        --output-file="$tempfile" \
        ; [ ! $? -eq 0 ] && x
    if [ -s "$tempfile" ];then
        while IFS= read -r line; do
            append_arguments+=("$line")
        done < "$tempfile"
    fi
fi

chapter Obtain Certificate.
if [ -z "$tempfile" ];then
    tempfile=$(mktemp -p /dev/shm -t rcm-certbot-obtain-authenticator-digitalocean.XXXXXX)
fi
# https://eff-certbot.readthedocs.io/en/latest/using.html#combination
msg='Another instance of Certbot is already running.'
if [ "${#append_arguments[@]}" -gt 0 ];then
    set -- "${append_arguments[@]}"
fi
unset append_arguments
while true; do
    code certbot -v certonly"$is_certificate_name""$is_email" --non-interactive --agree-tos \
        "${is_domain_array[@]}" \
        "$@"
    certbot -v certonly $is_certificate_name $is_email --non-interactive --agree-tos \
        "${is_domain_array[@]}" \
        "$@" | tee "$tempfile"
    if [[ $(head -1 "$tempfile") == "$msg" ]];then
        e Retrying...; _.
        code sleep 3
        sleep 3
    else
        break
    fi
done
____

[ -n "$tempfile" ] && rm "$tempfile"
____
# parse-options.sh \
# --without-end-options-double-dash \
# --compact \
# --clean \
# --no-hash-bang \
# --no-original-arguments \
# --no-error-invalid-options \
# --no-error-require-arguments << EOF | clip
# FLAG=(
# --fast
# --version
# --help
# )
# VALUE=(
# --certificate-name
# --email
# --dns-plugin
# )
# MULTIVALUE=(
# --domain
# )
# FLAG_VALUE=(
# )
# CSV=(
# )
# EOF
# clear
